pcodes <- read.csv('data/col_admin3_dane.csv')
nrow()
nrow(pcodes)
nrow(muniques)
names(pcodes)
names(muniques)
summary(muniques$pcode %in% muniques%pcode)
summary(muniques$pcode %in% muniques$pcode)
summary(muniques$pcode %in% pcodes$admin3)
other <- muniques[muniques$pcode %in% pcodes$admin3, ]
View(other)
other <- muniques[!(muniques$pcode %in% pcodes$admin3), ]
View(other)
pcodes <- read.csv('data/col_admin3_dane.csv')
# Checking for unique locations
muniques <- data.frame(original = unique(data$MPIO_ORIGEN))
muniques$pcode <- gsub(".*-", "", muniques$original)
# Checking
summary(muniques$pcode %in% pcodes$admin3)  # 4 FALSE
other <- muniques[!(muniques$pcode %in% pcodes$admin3), ]
View(other)
as.null(null)
as.null("null")
as.null(1)
total2014perPcode <- tapply(as.numeric(dataFrom2013$TOTAL), dataFrom2013$pcode_adm3_origen, sum)
# this dataset has around 4 million records
# take care when loading / handling it
data <- read.table('data/source/140812_UARIV_RNI_CONSULTA_EDADES.txt',
header = T,
sep = ';')
# fileEncoding = "UTF-8")  # error when trying encoding
# working with a sample
# x <- head(data)
nrow(data)
# transforming dates
data$FECHA <- paste0(data$FECHA, '01')  # adding 01 to make it easier for parsing
data$FECHA <- ymd(data$FECHA)  # converting to a date object with lubridate
# adding pcodes
data$pcode_adm3_origen <- gsub(".*-", "", data$MPIO_ORIGEN)
data$pcode_adm3_llegada <- gsub(".*-", "", data$MPIO_LLEGADA)
# cleaning the ,00
data$TOTAL <- gsub(",00", "", data$TOTAL)
data$EDAD_HECHO <- gsub(",00", "", data$EDAD_HECHO)
# preparing for graphics
totalPerDate <- tapply(as.numeric(data$TOTAL), data$FECHA, sum)
write.csv(totalPerDate, 'data/totalPerDate.csv', row.names = T)
meanTotal <- mean(totalPerDate); meanTotal
write.csv(totalPerDate, 'data/totalPerDate.csv', row.names = T)
meanTotal <- mean(totalPerDate); meanTotal
names(totalPerDate)
write.csv(totalPerDate, 'data/totalPerDate2.csv', row.names = T)
# selecting only data between 2013-01-01 and 2013-12-31
dataFrom2013 <- data[as.Date(data$FECHA) < as.Date('2013-12-31') &
as.Date(data$FECHA) > as.Date('2013-01-01'),]
totalFrom2013 <- tapply(as.numeric(dataFrom2013$TOTAL), dataFrom2013$FECHA, sum)
total2014perPcode <- tapply(as.numeric(dataFrom2013$TOTAL), dataFrom2013$pcode_adm3_origen, sum)
View(total2014perPcode)
View(totalFrom2013)
View(total2014perPcode)
total2013perPcode <- tapply(as.numeric(dataFrom2013$TOTAL), dataFrom2013$pcode_adm3_origen, sum)
View(total2013perPcode)
write.csv(total2013perPcode, 'data/idp_map_data.csv', row.names = T)
library(rjson)
# Loading the geographic data from a file.
# admin2 <- fromJSON(file = 'data/geo/admin_2.geojson')  # admin2 will be processed later
admin3 <- fromJSON(file = 'data/geo/admin_3.geojson')
names(admin3
)
names(admin3$features)
names(admin3$features[[1]])
names(admin3$features[[1]]$properties)
head(admin3$features[[1]]$properties$CODANE)
head(admin3$features[[1]]$properties$CODANEDEP)
geoData <- read.csv('data/idp_map_data.csv')
names(geoData) <- c('pcode', 'value')
as.null(NULL)
# Function to add properties to the GeoJSON based
# on the existing p-code.
addDatatoGeoJson <- function(df = NULL) {
# tests
if (!is.data.frame(df)) stop('We need a data.frame with the headers `pcode` and `value`')
# iterating over each property
cat('Storing data.frame in GeoJSON.\n')
pb <- txtProgressBar(min = 0, max = length(admin3$features), style = 3, char = ".")
for (i in 1:length(admin3$features)) {
setTxtProgressBar(pb, i)
# adding the idps figure to the geojson
idp_data <- geoData[grep(admin3$features[[i]]$properties$CODANE, as.character(df$pcode)),2]
idp_data = ifelse(length(idp_data) == 0, as.null(NULL), as.numeric(idp_data))
admin3$features[[i]]$properties$IDPDATA <- idp_data
}
# Returning data.frame
cat('\nDone!')
return(admin3)
}
# making the join
admin3 <- addDatatoGeoJson(geoData)
# Storign the resulting JSON
sink("data/geo/idp_map_data.geojson")
cat(toJSON(admin3))
sink()
# Function to add properties to the GeoJSON based
# on the existing p-code.
addDatatoGeoJson <- function(df = NULL) {
# tests
if (!is.data.frame(df)) stop('We need a data.frame with the headers `pcode` and `value`')
# iterating over each property
cat('Storing data.frame in GeoJSON.\n')
pb <- txtProgressBar(min = 0, max = length(admin3$features), style = 3, char = ".")
for (i in 1:length(admin3$features)) {
setTxtProgressBar(pb, i)
# adding the idps figure to the geojson
idp_data <- geoData[grep(admin3$features[[i]]$properties$CODANE, as.character(df$pcode)),2]
idp_data = ifelse(length(idp_data) == 0, NULL, as.numeric(idp_data))
admin3$features[[i]]$properties$IDPDATA <- idp_data
}
# Returning data.frame
cat('\nDone!')
return(admin3)
}
# making the join
admin3 <- addDatatoGeoJson(geoData)
# Function to add properties to the GeoJSON based
# on the existing p-code.
addDatatoGeoJson <- function(df = NULL) {
# tests
if (!is.data.frame(df)) stop('We need a data.frame with the headers `pcode` and `value`')
# iterating over each property
cat('Storing data.frame in GeoJSON.\n')
pb <- txtProgressBar(min = 0, max = length(admin3$features), style = 3, char = ".")
for (i in 1:length(admin3$features)) {
setTxtProgressBar(pb, i)
# adding the idps figure to the geojson
idp_data <- geoData[grep(admin3$features[[i]]$properties$CODANE, as.character(df$pcode)),2]
if (length(idp_data) == 0) {
admin3$features[[i]]$properties$IDPDATA <- NULL
}
else admin3$features[[i]]$properties$IDPDATA <- as.numeric(idp_data)
}
# Returning data.frame
cat('\nDone!')
return(admin3)
}
admin3 <- addDatatoGeoJson(geoData)
# Storign the resulting JSON
sink("data/geo/idp_map_data.geojson")
cat(toJSON(admin3))
sink()
# Function to add properties to the GeoJSON based
# on the existing p-code.
addDatatoGeoJson <- function(df = NULL) {
# tests
if (!is.data.frame(df)) stop('We need a data.frame with the headers `pcode` and `value`')
# iterating over each property
cat('Storing data.frame in GeoJSON.\n')
pb <- txtProgressBar(min = 0, max = length(admin3$features), style = 3, char = ".")
for (i in 1:length(admin3$features)) {
setTxtProgressBar(pb, i)
# adding the idps figure to the geojson
idp_data <- geoData[grep(admin3$features[[i]]$properties$CODANE, as.character(df$pcode)),2]
if (length(idp_data) == 0) {
admin3$features[[i]]$properties$IDPDATA <- NULL
}
else admin3$features[[i]]$properties$IDPDATA <- as.numeric(idp_data)
}
# Returning data.frame
cat('\nDone!')
return(admin3)
}
# making the join
admin3 <- addDatatoGeoJson(geoData)
# Storign the resulting JSON
sink("data/geo/idp_map_data.geojson")
cat(toJSON(admin3))
sink()
as.numeric(idp_data)
12000 / 100000
# Load original data.
data <- read.table('data/source/140812_UARIV_RNI_CONSULTA_EDADES.txt',
header = T,
sep = ';')
# Load updated pcode data.
pcodes <- read.csv('data/col_admin3_dane.csv')
View(other)
names(San Jose de Ocune-99760)
names(data)
x <- data[data$MPIO_ORIGEN == 'San Jose de Ocune-99760', ]
View(x)
nrow(x)
sum(x$TOTAL)
sum(as.numeric(x$TOTAL))
VieW(geoData)
View(geoData)
nrow(geoData)
nrow(pcodes)
names(admin3$features[[1]]$properties)
names(total2013perPcode)
nrow(total2013perPcode)
setwd("~/Documents/Programming/colombia_population")
library(xlsx)
url = 'https://www.dane.gov.co/files/investigaciones/poblacion/proyepobla06_20/Municipal_area_1985-2020.xls'
download.file(url, 'data/Municipal_area_1985-2020.xlsx', method = 'curl')
population <- read.xlsx2('data/Municipal_area_1985-2020.xlsx', sheetIndex = 1, startRow = 10)
View(population)
names(population)[3:6]
names(population)[5:30]
names(population)[5:31]
names(population)[5:40]
names(population)[5:41]
names(population)[5:40]
paste0("Total-", gsub("X", "", names(population)[5:40]))
names(population)
x <- melt(id = c("DP", "DPNOM", "DPMP", "MPIO"))
library(reshape2)
x <- melt(id = c("DP", "DPNOM", "DPMP", "MPIO"))
x <- melt(populaton, id = c("DP", "DPNOM", "DPMP", "MPIO"))
?melt
x <- melt(data = populaton, id = c("DP", "DPNOM", "DPMP", "MPIO"))
population <- read.xlsx2('data/Municipal_area_1985-2020.xlsx', sheetIndex = 1, startRow = 10)
x <- melt(data = populaton, id = c("DP", "DPNOM", "DPMP", "MPIO"))
x <- melt(data = populaton)
library(reshape2)
x <- melt(populaton)
melt(populaton)
library(reshape2)
install.packages('reshape2')
install.packages("reshape2")
library(reshape2)
melt(population)
x <- melt(data = populaton, id = c("DP", "DPNOM", "DPMP", "MPIO"))
x <- melt(data = population, id = c("DP", "DPNOM", "DPMP", "MPIO"))
nrow(x)
View(x)
meltPop <- melt(data = population, id = c("DP", "DPNOM", "DPMP", "MPIO"))
names(meltPop)
meltPop$variable <- gsub("X", "", meltPop$variable)
View(meltPop)
colnames(meltPop$variable)
colnames(meltPop)[7]
colnames(meltPop)[5]
colnames(meltPop)[5] <- 'year'
# Cleaning
population <- read.xlsx2('data/Municipal_area_1985-2020.xlsx', sheetIndex = 1, startRow = 10)
library(xlsx)
population <- read.xlsx2('data/Municipal_area_1985-2020.xlsx', sheetIndex = 1, startRow = 10)
names(population)
names(population)[5:30]
names(population)[5:40]
length(names(population))
View(popMelt)
meltPop <- melt(data = population, id = c("DP", "DPNOM", "DPMP", "MPIO"))
meltPop$variable <- gsub("X", "", meltPop$variable)
View(meltPop$variable)
paste0("Total-", gsub("X", "", names(population)[5:40]))
names(population) <- paste0("Total-", gsub("X", "", names(population)[5:40]))
names(population)
population <- read.xlsx2('data/Municipal_area_1985-2020.xlsx', sheetIndex = 1, startRow = 10)
names(population)[4:40] <- paste0("Total-", gsub("X", "", names(population)[5:40]))
names(population)[5:40] <- paste0("Total-", gsub("X", "", names(population)[5:40]))
names(population)
2020-1985
41+35
names(population)[41:76]
names(population)[5:40] <- paste0("Total-", gsub("X", "", names(population)[5:40]))
names(population)[41:76] <- paste0("Cabecera-", gsub("X", "", names(population)[41:76]))
names(population)[77:length(names(population))] <- paste0("Resto-", gsub("X", "", names(population)[77:length(names(population))]))
names(population)
population <- read.xlsx2('data/Municipal_area_1985-2020.xlsx', sheetIndex = 1, startRow = 10)
## Cleaning
# Adding category data.
names(population)[5:40] <- paste0("Total-", gsub("X", "", names(population)[5:40]))
names(population)[41:76] <- paste0("Cabecera-", gsub("X", "", names(population)[41:76]))
names(population)[77:length(names(population))] <- paste0("Resto-", gsub("X", "", names(population)[77:length(names(population))]))
names(population)
meltPop <- melt(data = population, id = c("DP", "DPNOM", "DPMP", "MPIO"))
meltPop$variable <- gsub(".1", "", meltPop$variable)
meltPop$variable <- gsub(".2", "", meltPop$variable)
View(meltPop)
meltPop <- melt(data = population, id = c("DP", "DPNOM", "DPMP", "MPIO"))
meltPop$variable <- gsub("\.1", "", meltPop$variable)
meltPop$variable <- gsub("\\.1", "", meltPop$variable)
View(meltPop)
meltPop$variable <- gsub("\\.2", "", meltPop$variable)
View(meltPop)
colnames(meltPop)[5] <- 'year'
View(meltPop)
View(meltPop)
meltPop$category <- NA
summary(grepl("Total", meltPop$year))
downloadAndProcess <- function() {
# Downloading file
url = 'https://www.dane.gov.co/files/investigaciones/poblacion/proyepobla06_20/Municipal_area_1985-2020.xls'
download.file(url, 'data/Municipal_area_1985-2020.xlsx', method = 'curl')
# Loading file.
# has to use read.xlsx2 for some reason.
message('Loading file ...')
Sys.sleep(5)  # let it sleep for 5 seconds.
population <- read.xlsx2('data/Municipal_area_1985-2020.xlsx', sheetIndex = 1, startRow = 10)
## Cleaning
# Adding category data.
names(population)[5:40] <- paste0("Total-", gsub("X", "", names(population)[5:40]))
names(population)[41:76] <- paste0("Cabecera-", gsub("X", "", names(population)[41:76]))
names(population)[77:length(names(population))] <- paste0("Resto-", gsub("X", "", names(population)[77:length(names(population))]))
# Melting
meltPop <- melt(data = population, id = c("DP", "DPNOM", "DPMP", "MPIO"))
meltPop$variable <- gsub("\\.1", "", meltPop$variable)
meltPop$variable <- gsub("\\.2", "", meltPop$variable)
colnames(meltPop)[5] <- 'year'
# Creating category labels
meltPop$category <- NA
ifelse(grepl("Total", meltPop$year), "Total", meltPop$category)
ifelse(grepl("Cabecera", meltPop$year), "Cabecera", meltPop$category)
ifelse(grepl("Resto", meltPop$year), "Resto", meltPop$category)
# Cleaning-up
meltPop$year <- gsub("Total-", "", meltPop$year)
meltPop$year <- gsub("Cabecera-", "", meltPop$year)
meltPop$year <- gsub("Resto-", "", meltPop$year)
# Finish
return(meltPop)
}
data <- downloadAndProcess()
View(data)
meltPop$category <- ifelse(grepl("Total", meltPop$year), "Total", meltPop$category)
meltPop$category <- ifelse(grepl("Cabecera", meltPop$year), "Cabecera", meltPop$category)
meltPop$category <- ifelse(grepl("Resto", meltPop$year), "Resto", meltPop$category)
View(meltPop)
downloadAndProcess <- function() {
# Downloading file
url = 'https://www.dane.gov.co/files/investigaciones/poblacion/proyepobla06_20/Municipal_area_1985-2020.xls'
download.file(url, 'data/Municipal_area_1985-2020.xlsx', method = 'curl')
# Loading file.
# has to use read.xlsx2 for some reason.
message('Loading file ...')
Sys.sleep(5)  # let it sleep for 5 seconds.
population <- read.xlsx2('data/Municipal_area_1985-2020.xlsx', sheetIndex = 1, startRow = 10)
## Cleaning
# Adding category data.
names(population)[5:40] <- paste0("Total-", gsub("X", "", names(population)[5:40]))
names(population)[41:76] <- paste0("Cabecera-", gsub("X", "", names(population)[41:76]))
names(population)[77:length(names(population))] <- paste0("Resto-", gsub("X", "", names(population)[77:length(names(population))]))
# Melting
meltPop <- melt(data = population, id = c("DP", "DPNOM", "DPMP", "MPIO"))
meltPop$variable <- gsub("\\.1", "", meltPop$variable)
meltPop$variable <- gsub("\\.2", "", meltPop$variable)
colnames(meltPop)[5] <- 'year'
# Creating category labels
meltPop$category <- NA
meltPop$category <- ifelse(grepl("Total", meltPop$year), "Total", meltPop$category)
meltPop$category <- ifelse(grepl("Cabecera", meltPop$year), "Cabecera", meltPop$category)
meltPop$category <- ifelse(grepl("Resto", meltPop$year), "Resto", meltPop$category)
# Cleaning-up
meltPop$year <- gsub("Total-", "", meltPop$year)
meltPop$year <- gsub("Cabecera-", "", meltPop$year)
meltPop$year <- gsub("Resto-", "", meltPop$year)
# Finish
return(meltPop)
}
data <- downloadAndProcess()
View(data)
write.csv(data, 'data/municipal_population_data.csv', row.names = F)
total2013perPcode <- data.frame(pcode = row.names(total2013perPcode$pcodes)
total2013perPcode <- data.frame(pcode = row.names(total2013perPcode$pcodes))
View(total2013perPcode)
total2013perPcode <- data.frame(pcode = row.names(total2013perPcode$pcodes),
value = total2013perPcode)
total2013perPcode <- data.frame(pcode = row.names(total2013perPcode),
value = total2013perPcode)
View(total2013perPcode)
popData <- read.csv("data/source/municipal_population_data.csv")
setwd("~/Documents/Programming/HDXViz/hdxviz-col-humanitarian-trends")
popData <- read.csv("data/source/municipal_population_data.csv")
nrow(popData)
nrow(popData)
library(httr)
library(rjson)
urlList = 'https://data.hdx.rwlabs.org/api/action/related_list'
relatedList <- fromJSON(urlList)
library(RCurl)
relatedList <- fromJSON(getURL(urlList))
names(relatedList)
names(relatedList$result)
names(relatedList$result[1])
names(relatedList$result[[1]])
length(relatedList$result)
relatedList$result[[1]]image_url
relatedList$result[[1]]image_url
relatedList$result[[1]]$image_url
relatedList$result[[2]]$image_url
gsub("http", "https", relatedList$result[[2]]$image_url)
# Function to assemble list of urls
changeUrl <- function() {
urlList = 'https://data.hdx.rwlabs.org/api/action/related_list'
relatedList <- fromJSON(getURL(urlList))
#length(relatedList$result)
for (i in 1:4) {
targetId <- relatedList$result[[i]]$id
safeUrl <- gsub("http", "https", relatedList$result[[i]]$image_url)
# Making post request
pars <- list(
id = targetId,
image_url = safeUrl
)
POST("https://data.hdx.rwlabs.org/api/action/related_update",
body = pars,
add_headers(Authorization = 'a6863277-f35e-4f50-af85-78a2d9ebcdd3')
)
}
}
changeUrl()
# Function to assemble list of urls
changeUrl <- function() {
cat("Assembling list ...\n")
urlList = 'https://data.hdx.rwlabs.org/api/action/related_list'
relatedList <- fromJSON(getURL(urlList))
#length(relatedList$result)
cat('---------------------------------\n')
cat('Changing URLs.')
cat('---------------------------------\n')
for (i in 1:4) {
cat("URL: ", i, "\n")
targetId <- relatedList$result[[i]]$id
safeUrl <- gsub("http", "https", relatedList$result[[i]]$image_url)
# Making post request
pars <- list(
id = targetId,
image_url = safeUrl
)
POST("https://data.hdx.rwlabs.org/api/action/related_update",
body = pars,
add_headers(Authorization = 'a6863277-f35e-4f50-af85-78a2d9ebcdd3')
)
}
}
changeUrl()
# Function to assemble list of urls
changeUrl <- function() {
cat("Assembling list ...\n")
urlList = 'https://data.hdx.rwlabs.org/api/action/related_list'
relatedList <- fromJSON(getURL(urlList))
#length(relatedList$result)
cat('---------------------------------\n')
cat('Changing URLs.\n')
cat('---------------------------------\n')
for (i in 1:4) {
targetId <- relatedList$result[[i]]$id
safeUrl <- gsub("http", "https", relatedList$result[[i]]$image_url)
cat(i, "| ", "id: ", targetId, " | ", "safe url: ", safeUrl,  "\n")
# Making post request
pars <- list(
id = targetId,
image_url = safeUrl
)
POST("https://data.hdx.rwlabs.org/api/action/related_update",
body = pars,
add_headers(Authorization = 'a6863277-f35e-4f50-af85-78a2d9ebcdd3')
)
}
}
changeUrl()
# Function to assemble list of urls
changeUrl <- function() {
cat("Assembling list ...\n")
urlList = 'https://data.hdx.rwlabs.org/api/action/related_list'
relatedList <- fromJSON(getURL(urlList))
cat('---------------------------------\n')
cat('Changing URLs.\n')
cat('---------------------------------\n')
for (i in 1:length(relatedList$result)) {
targetId <- relatedList$result[[i]]$id
safeUrl <- gsub("http", "https", relatedList$result[[i]]$image_url)
cat(i, "| ", "id: ", targetId, " | ", "safe url: ", safeUrl,  "\n")
# Making post request
pars <- list(
id = targetId,
image_url = safeUrl
)
POST("https://data.hdx.rwlabs.org/api/action/related_update",
body = pars,
add_headers(Authorization = 'a6863277-f35e-4f50-af85-78a2d9ebcdd3')
)
}
}
changeUrl()
# Function to assemble list of urls
changeUrl <- function() {
cat("Assembling list ...\n")
urlList = 'https://data.hdx.rwlabs.org/api/action/related_list'
relatedList <- fromJSON(getURL(urlList))
cat('---------------------------------\n')
cat('Changing URLs.\n')
cat('---------------------------------\n')
for (i in 1:length(relatedList$result)) {
targetId <- relatedList$result[[i]]$id
safeUrl <- gsub("httpss", "https", relatedList$result[[i]]$image_url)
cat(i, "| ", "id: ", targetId, " | ", "safe url: ", safeUrl,  "\n")
# Making post request
pars <- list(
id = targetId,
image_url = safeUrl
)
POST("https://data.hdx.rwlabs.org/api/action/related_update",
body = pars,
add_headers(Authorization = 'a6863277-f35e-4f50-af85-78a2d9ebcdd3')
)
}
}
changeUrl()
testUrl <- 'https://data.hdx.rwlabs.org/api/action/package_show?id=absolute-test-dataset-as-it-may-sound-indeed'
testUrl
testId = 'absolute-test-dataset-as-it-may-sound-indeed'
packageShowUrl = 'https://data.hdx.rwlabs.org/api/action/package_show?id='
packageUpdateUrl = 'https://data.hdx.rwlabs.org/api/action/package_update?id='
