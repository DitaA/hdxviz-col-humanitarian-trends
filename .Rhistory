as.Date('200101', "%y%m")
as.Date('200101', "%y%m")
as.Date('200101', "%Y%m")
as.Date('200101', "%y%M")
as.Date('200101', "%y%m")
as.Date('200101', "%y")
as.Date('2001-01', "%y")
as.Date('2001-01', "%Y%m")
as.Date('2001-01', "%Y%M")
as.Date('2001-01', "%Y-%m")
as.Date('2001-01', "%y-%m")
as.Date('2001-01-01')
as.Date('2001-01')
as.Date('2001-01', '%y-%m')
library(lubridate)
ym('200101')
ymd('200101')
ymd('20010101')
ymd('20010901')
as.Date('20010901')
as.Date('20010901', format = "%y-%m-%d")
as.Date('20010901', format = "%Y-%m-%d")
as.Date('20010901', "%Y-%m-%d")
ymd('20010901')
library(lubridate)
x <- head(data)
x$FECHA <- ymd(x$FECHA)
View(x)
x <- head(data)
x$FECHA <- paste0(x$FECHA, "01")
x$FECHA <- ymd(x$FECHA)
View(x)
data$FECHA <- paste0(data$FECHA, '01')
data$FECHA <- ymd(data$FECHA)
data$pcode_adm3_origen <- gsub(".*-", "", data$MPIO_ORIGEN)
data$pcode_adm3_llegada <- gsub(".*-", "", data$MPIO_LLEGADA)
data$EDAD_HECHO <- gsub(",00", "", data$EDAD_HECHO)
latestData <- data[data$FECHA > as.Date('2013-01-01'),]
class()
class(data$FECHA)
latestData <- data[as.Date(data$FECHA) > as.Date('2013-01-01'),]
names(latestData)
nrow(v)
nrow()
nrow(latestData)
summary(latestData$FECHA)
totalPerDate <- tapply(as.numeric(data$TOTAL), data$FECHA, sum)
View(totalPerDate)
library(ggplot2)
write.csv(totalPerDate, 'data/totalPerDate.csv', row.names = T)
totalPerDate <- read.csv("data/totalPerDate.csv")
View(totalPerDate)
names(totalPerDate) <- c('date', 'total_idps')
View(totalPerDate)
totalPerDate$date <- as.Date(totalPerDate$date)
View(totalPerDate)
ggplot(totalPerDate) + theme_bw() +
geom_line(aes(date, total), stat = 'identity', size = 1.3, color = '#404040')
ggplot(totalPerDate) + theme_bw() +
geom_line(aes(date, total_idps), stat = 'identity', size = 1.3, color = '#404040')
write.csv(totalPerDate, 'data/totalPerDate.csv', row.names = F)
ggplot(totalPerDate) + theme_bw() +
geom_point(aes(date, total_idps), stat = 'identity', size = 1.3, color = '#404040')
ggplot(totalPerDate) + theme_bw() +
geom_point(aes(date, total_idps), stat = 'identity', size = 1.3, color = '#404040') +
stat_smooth()
ggplot(totalPerDate) + theme_bw() +
geom_point(aes(date, total_idps), stat = 'identity', size = 1.3, color = '#404040') +
geom_smooth()
# timeseries -- nice looking line!
ggplot(totalPerDate) + theme_bw() +
geom_point(aes(date, total_idps), stat = 'identity', size = 1.3, color = '#404040') +
geom_smooth(aes(date, total_idps))
?geom_smooth
ggplot(totalPerDate) + theme_bw() +
geom_point(aes(date, total_idps), stat = 'identity', size = 1.3, color = '#404040') +
geom_smooth(aes(date, total_idps), se = F)
ggplot(totalPerDate) + theme_bw() +
geom_line(aes(date, total_idps), stat = 'identity', size = 1.3, color = '#404040') +
geom_smooth(aes(date, total_idps), se = F)
ggplot(totalPerDate) + theme_bw() +
geom_line(aes(date, total_idps), stat = 'identity', size = 1.3, color = '#404040') +
geom_smooth(aes(date, total_idps), method = "lm")
library(rjson)
admin2 <- fromJSON('data/geo/admin_2.geojson')
?fromJSON
admin2 <- fromJSON(file = 'data/geo/admin_2.geojson')
class(admin2)
length(admin2)
admin2[1]
admin2[2]
admin2[3]
length(admin2[3])
length(admin2[[3]])
length(admin2[[3]]$features)
length(admin2$features)
length(admin2$features$[[1]])
length(admin2$features[[1]])
admin2$features[[1]]
admin2[[2]]
admin2$type
admin2[[2]]
admin2[[2]]$properties
admin2[[2]]$properties$name
admin2[[1
]]
names(admin2)
admin2$type
names(admin2$type)
names(admin2$crs)
admin2$crs$type
names(admin2)
names(admin2$features)
admin2$features
names(admin2$features)
length(admin2$features)
names(admin2$features[[1]])
names(admin2$features[[1]]$properties)
names(admin2$features[[1]]$properties[[1]])
names(admin2$features[[1]]$properties[1])
admin2$features[[1]]$properties[1]
admin2$features[[1]]$properties[1]
ls
# dependencies
library(lubridate)
# this dataset has around 4 million records
# take care when loading / handling it
data <- read.table('data/source/140812_UARIV_RNI_CONSULTA_EDADES.txt', header = T, sep = ';')
data$FECHA <- paste0(data$FECHA, '01')  # adding 01 to make it easier for parsing
data$FECHA <- ymd(data$FECHA)  # converting to a date object with lubridate
# adding pcodes
data$pcode_adm3_origen <- gsub(".*-", "", data$MPIO_ORIGEN)
data$pcode_adm3_llegada <- gsub(".*-", "", data$MPIO_LLEGADA)
nrow(data)
View(data)
x <- unique(data$DEPTO_ORIGEN)
nrow(x)
length(x)
View(x)
names(admin2$features[[1]]$properties)
listFromCOD <- admin2$features[[1]]$properties$DEPARTAMEN
listFromDataset <- unique(data$DEPTO_ORIGEN)
class(listFromCOD)
View(listFromCOD)
listFromCOD
listFromCOD <- admin2$features$properties$DEPARTAMEN
class(listFromCOD)
listFromCOD
listFromCOD <- admin2$features[1]$properties$DEPARTAMEN
listFromCOD
listFromCOD <- admin2$features[[1]]$properties$DEPARTAMEN
listFromCOD
admin2$features[[1]]$properties$DEPARTAMEN
admin2$features$properties$DEPARTAMEN
admin2$features$properties
admin2$features
admin2$features$properties
admin2$features$properties[1]
admin2$features[[1]]$properties
admin2$featureslength(admin2$features[[1]]$properties
length(admin2$features
)
for (i in 1:length(admin2$features)) {
it = admin2$features[[i]]$properties$DEPARTAMEN
if (i == 1) listFromCOD <- depCod
else listFromCOD <- rbind(list, it)
}
# In GeoJSON files properties can be added
# those properties will be the properties that
# that contain that mapped data and alike.
for (i in 1:length(admin2$features)) {
it = admin2$features[[i]]$properties$DEPARTAMEN
if (i == 1) listFromCOD <- it
else listFromCOD <- rbind(list, it)
}
it = admin2$features[[1]]$properties$DEPARTAMEN
it
it2 = admin2$features[[2]]$properties$DEPARTAMEN
x <- rbind(it, it2)
x
x <- c(it, it2)
x
class(x)
as.list(x)
for (i in 1:length(admin2$features)) {
it = admin2$features[[i]]$properties$DEPARTAMEN
if (i == 1) listFromCOD <- it
else listFromCOD <- c(list, it)
}
length(listFromCOD)
listFromCOD
for (i in 1:length(admin2$features)) {
it = admin2$features[[i]]$properties$DEPARTAMEN
if (i == 1) listFromCOD <- it
else listFromCOD <- c(listFromCOD, it)
}
nrow(listFromCOD)
length(listFromCOD)
View(listFromCOD)
listFromCOD <- tolower(listFromCOD)
listFromCOD
listFromDataset
listFromDataset <- tolower(unique(data$DEPTO_ORIGEN))
listFromDataset
listFromDataset %in% listFromCOD
listFromDataset
listFromDataset <- toloweR(listFromDataset)
listFromDataset <- tolower(listFromDataset)
View(listFromCOD)
nrow(listFromDataset)
length(listFromDataset)
write.csv(listFromCOD, 'data/source/listFromCOD', row.names = F)
write.csv(listFromDataset, 'data/source/listFromDataset.csv', row.names = F)
write.csv(listFromCOD, 'data/source/listFromCOD.csv', row.names = F)
write.csv(listFromDataset, 'data/source/listFromDataset.csv', row.names = F)
listFromCOD
listFromDataset
data <- read.table('data/source/140812_UARIV_RNI_CONSULTA_EDADES.txt',
header = T,
sep = ';',
fileEncoding = "UTF-8")
data <- read.table('data/source/140812_UARIV_RNI_CONSULTA_EDADES.txt',
header = T,
sep = ';')
data <- read.table('data/source/140812_UARIV_RNI_CONSULTA_EDADES.txt',
header = T,
sep = ';',
fileEncoding = "UTF-8")  # make sure encoding is correct
# this dataset has around 4 million records
# take care when loading / handling it
data <- read.table('data/source/140812_UARIV_RNI_CONSULTA_EDADES.txt',
header = T,
sep = ';',
fileEncoding = "UTF-8")  # make sure encoding is correct
# this dataset has around 4 million records
# take care when loading / handling it
data <- read.table('data/source/140812_UARIV_RNI_CONSULTA_EDADES.txt',
header = T,
sep = ';',
fileEncoding = "UTF-8")  # make sure encoding is correct
nrow(data)
data <- read.table('data/source/140812_UARIV_RNI_CONSULTA_EDADES.txt',
header = T,
sep = ';')
nrow(data)
data$FECHA <- paste0(data$FECHA, '01')  # adding 01 to make it easier for parsing
data$FECHA <- ymd(data$FECHA)  # converting to a date object with lubridate
data <- read.table('data/source/140812_UARIV_RNI_CONSULTA_EDADES.txt',
header = T,
sep = ';')
)
ead(data)
# transforming dates
data$FECHA <- paste0(data$FECHA, '01')  # adding 01 to make it easier for parsing
data$FECHA <- ymd(data$FECHA)  # converting to a date object with lubridate
# adding pcodes
data$pcode_adm3_origen <- gsub(".*-", "", data$MPIO_ORIGEN)
data$pcode_adm3_llegada <- gsub(".*-", "", data$MPIO_LLEGADA)
# cleaning the ,00
data$TOTAL <- gsub(",00", "", data$TOTAL)
data$EDAD_HECHO <- gsub(",00", "", data$EDAD_HECHO)
View(data)
?sink
length(admin3$features)
admin3 <- fromJSON(file = 'data/geo/admin_3.geojson')
length(admin3$features)
length(admin3$features)
names(admin3$features[[1]]$properties)
names(admin3$features[[1]]$properties$CODANE)
admin3$features[[1]]$properties$CODANE
class(list())
as.list(c(1,3))
x <- as.list(c(1,3))
class(x)
class(x) != list()
class(x) == class(list())
is.list(l)
is.list()
is.list(x)
is.data.frame(x)
?setTxtProgressbar
?setTxtProgressBar
admin3$features[[1]]$properties$CODANE
# selecting only data more recent than 2013-01-01
latestData <- data[as.Date(data$FECHA) > as.Date('2013-01-01'),]
# perform sum of all of
# the idps that come from the
# same location
total2014perDept <- tapply(as.numeric(latestData$TOTAL), latestData$DEPTO_ORIGEN, sum)
total2014perMun <- tapply(as.numeric(latestData$TOTAL), latestData$MPIO_ORIGEN, sum)
total2014perPcode <- tapply(as.numeric(latestData$TOTAL), latestData$pcode_adm3, sum)
total2014perPcode <- tapply(as.numeric(latestData$TOTAL), latestData$pcode_adm3_origen, sum)
nrow(total2014perPcode)
View(total2014perPcode)
View(total2014perPcode)
write.csv(total2014perPcode, 'data/idp_map_data.csv', row.names = T)
data <- read.csv('data/total2014perPcode.csv')
data <- read.csv('data/idp_map_data.csv')
nrow(data)
names(data)
View(data)
names(data) <- c('pcode', 'value')
admin3$features[[i]]$properties$CODANE
grepl(admin3$features[[i]]$properties$CODANE, data$pcode)
summary(grepl(admin3$features[[i]]$properties$CODANE, data$pcode))
summary(grepl(admin3$features[[1]]$properties$CODANE, data$pcode))
admin3$features[[1]]$properties$CODANE
class(admin3$features[[1]]$properties$CODANE)
data$pcode
class( data$pcode)
summary(grepl(admin3$features[[1]]$properties$CODANE, as.character(data$pcode)))
summary(grepl("99773", as.character(data$pcode)))
summary(grepl(admin3$features[[2]]$properties$CODANE, as.character(data$pcode)))
grep(admin3$features[[2]]$properties$CODANE, as.character(data$pcode))
data[grep(admin3$features[[2]]$properties$CODANE, as.character(data$pcode)),]
# Function to add properties to the GeoJSON based
# on the existing p-code.
addDatatoGeoJson <- function(df = NULL) {
# tests
if (!is.data.frame(l)) stop('We need a data.frame with the headers `pcode` and `value`')
# iterating over each property
cat('Starting.\n')
pb <- txtProgressBar(min = 0, max = length(admin3$features), style = 3, char = ".")
for (i in 1:length(admin3$features)) {
setTxtProgressBar(pb, i)
# adding the idps figure to the geojson
admin3$features[[i]]$properties$IDPs_July_2014 <- data[grep(admin3$features[[i]]$properties$CODANE, as.character(data$pcode)),]
}
# Returning data.frame
cat('Done!')
return(admin3)
}
x <- addDatatoGeoJson(data)
# Function to add properties to the GeoJSON based
# on the existing p-code.
addDatatoGeoJson <- function(df = NULL) {
# tests
if (!is.data.frame(df)) stop('We need a data.frame with the headers `pcode` and `value`')
# iterating over each property
cat('Starting.\n')
pb <- txtProgressBar(min = 0, max = length(admin3$features), style = 3, char = ".")
for (i in 1:length(admin3$features)) {
setTxtProgressBar(pb, i)
# adding the idps figure to the geojson
admin3$features[[i]]$properties$IDPs_July_2014 <- data[grep(admin3$features[[i]]$properties$CODANE, as.character(data$pcode)),]
}
# Returning data.frame
cat('Done!')
return(admin3)
}
x <- addDatatoGeoJson(data)
nrow(x)
class(x)
names(x)
admin3$features[[1]]$properties$IDPs_July_2014
admin3$features[[2]]$properties$IDPs_July_2014
admin3$features[[3]]$properties$IDPs_July_2014
admin3$features[[3]]$properties
data[grep(admin3$features[[2]]$properties$CODANE, as.character(data$pcode)),]
data[grep(admin3$features[[2]]$properties$CODANE, as.character(data$pcode)),2]
class(data[grep(admin3$features[[2]]$properties$CODANE, as.character(data$pcode)),2])
# Function to add properties to the GeoJSON based
# on the existing p-code.
addDatatoGeoJson <- function(df = NULL) {
# tests
if (!is.data.frame(df)) stop('We need a data.frame with the headers `pcode` and `value`')
# iterating over each property
cat('Starting.\n')
pb <- txtProgressBar(min = 0, max = length(admin3$features), style = 3, char = ".")
for (i in 1:length(admin3$features)) {
setTxtProgressBar(pb, i)
# adding the idps figure to the geojson
admin3$features[[i]]$properties$IDPs_July_2014 <- data[grep(admin3$features[[i]]$properties$CODANE, as.character(data$pcode)),2]
}
# Returning data.frame
cat('\nDone!')
return(admin3)
}
x <- addDatatoGeoJson(data)
x$features[[2]]$properties$IDPs_July_2014
# Function to add properties to the GeoJSON based
# on the existing p-code.
addDatatoGeoJson <- function(df = NULL) {
# tests
if (!is.data.frame(df)) stop('We need a data.frame with the headers `pcode` and `value`')
# iterating over each property
cat('Starting.\n')
pb <- txtProgressBar(min = 0, max = length(admin3$features), style = 3, char = ".")
for (i in 1:length(admin3$features)) {
setTxtProgressBar(pb, i)
# adding the idps figure to the geojson
admin3$features[[i]]$properties$IDPSJULY2014 <- data[grep(admin3$features[[i]]$properties$CODANE, as.character(data$pcode)),2]
}
# Returning data.frame
cat('\nDone!')
return(admin3)
}
x <- addDatatoGeoJson(data)
admin3 <- x
sink("data/geo/admin3_with_data.geojson")
cat(toJSON(admin3))
sink()
names(admin3$features[[2]]$properties)
admin3$features[[2]]$properties$IDPSJULY2014
admin3$features[[10]]$properties$IDPSJULY2014
admin3$features[[1]]$properties$IDPSJULY2014
admin3$features[[2]]$properties$IDPSJULY2014
admin3$features[[3]]$properties$IDPSJULY2014
# Storign JSON
sink("data/geo/idp_map_data.geojson")
cat(toJSON(admin3))
sink()
admin3 <- addDatatoGeoJson(data)
# Storign JSON
sink("data/geo/idp_map_data.geojson")
cat(toJSON(admin3))
sink()
admin3$features[[2]]$properties$IDPSJULY2014
class(admin3$features[[2]]$properties$IDPSJULY2014)
class(admin3$features[[10]]$properties$IDPSJULY2014)
admin3$features[[10]]$properties$IDPSJULY2014
is.integer(integer(0))
integer(0) == integer(0)
logical(integer(0))
is.logical(integer(0))
is.logical(1)
class(integer(0))
length(integer(0))
# Function to add properties to the GeoJSON based
# on the existing p-code.
addDatatoGeoJson <- function(df = NULL) {
# tests
if (!is.data.frame(df)) stop('We need a data.frame with the headers `pcode` and `value`')
# iterating over each property
cat('Storing data.frame in GeoJSON.\n')
pb <- txtProgressBar(min = 0, max = length(admin3$features), style = 3, char = ".")
for (i in 1:length(admin3$features)) {
setTxtProgressBar(pb, i)
# adding the idps figure to the geojson
idp_data <- data[grep(admin3$features[[i]]$properties$CODANE, as.character(data$pcode)),2]
idp_data <- ifelse(length(idp_data) == 0, NULL, idp_data)
admin3$features[[i]]$properties$IDPSJULY2014 <- idp_data
}
# Returning data.frame
cat('\nDone!')
return(admin3)
}
admin3 <- addDatatoGeoJson(data)
# Storign JSON
sink("data/geo/idp_map_data.geojson")
cat(toJSON(admin3))
sink()
idp_data = integer(0)
idp_data = NULL
idp_data
idp_data = integer(0)
ifelse(length(idp_data) == 0, NULL, idp_data)
length(idp_data)
length(idp_data) == 0
ifelse(length(idp_data) == 0, TRUE, FALSE)
ifelse(length(idp_data) == 0, NULL, FALSE)
ifelse(length(idp_data) == 0, 'null', FALSE)
# Function to add properties to the GeoJSON based
# on the existing p-code.
addDatatoGeoJson <- function(df = NULL) {
# tests
if (!is.data.frame(df)) stop('We need a data.frame with the headers `pcode` and `value`')
# iterating over each property
cat('Storing data.frame in GeoJSON.\n')
pb <- txtProgressBar(min = 0, max = length(admin3$features), style = 3, char = ".")
for (i in 1:length(admin3$features)) {
setTxtProgressBar(pb, i)
# adding the idps figure to the geojson
idp_data <- data[grep(admin3$features[[i]]$properties$CODANE, as.character(data$pcode)),2]
idp_data = ifelse(length(idp_data) == 0, 'null', idp_data)
admin3$features[[i]]$properties$IDPSJULY2014 <- idp_data
}
# Returning data.frame
cat('\nDone!')
return(admin3)
}
admin3 <- addDatatoGeoJson(data)
# Storign JSON
sink("data/geo/idp_map_data.geojson")
cat(toJSON(admin3))
sink()
admin3$features[[1]]$properties
admin3$features[[2]]$properties
# Function to add properties to the GeoJSON based
# on the existing p-code.
addDatatoGeoJson <- function(df = NULL) {
# tests
if (!is.data.frame(df)) stop('We need a data.frame with the headers `pcode` and `value`')
# iterating over each property
cat('Storing data.frame in GeoJSON.\n')
pb <- txtProgressBar(min = 0, max = length(admin3$features), style = 3, char = ".")
for (i in 1:length(admin3$features)) {
setTxtProgressBar(pb, i)
# adding the idps figure to the geojson
idp_data <- data[grep(admin3$features[[i]]$properties$CODANE, as.character(data$pcode)),2]
idp_data = ifelse(length(idp_data) == 0, NA, idp_data)
admin3$features[[i]]$properties$IDPSJULY2014 <- idp_data
}
# Returning data.frame
cat('\nDone!')
return(admin3)
}
admin3 <- addDatatoGeoJson(data)
# Storign JSON
sink("data/geo/idp_map_data.geojson")
cat(toJSON(admin3))
sink()
